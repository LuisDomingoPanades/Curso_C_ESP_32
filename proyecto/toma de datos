#include <WiFi.h>
#include "FS.h"
#include "SD.h"
#include "SPI.h"
#include <MPU9250.h>

MPU9250 mpu;
const char* ssid="ESP32-Access-Point" ;
const char* password="1234";
int i =0;
int k=0;
int j=0;
int prevmillis;
int prev_2millis;
float AccX;
float AccY;
float AccZ;
WiFiServer server(1500);

void readFile(fs::FS &fs, const char * path){
    Serial.printf("Reading file: %s\n", path);

    File file = fs.open(path);
    if(!file){
        Serial.println("Failed to open file for reading");
        return;
    }

    Serial.print("Read from file: ");
    while(file.available()){
        Serial.write(file.read());
    }
    file.close();
}
 void muestrea() {
        
       
        AccX=mpu.getAccX();
        AccY=mpu.getAccY();
        AccZ=mpu.getAccZ();
        
        
}
 


 

//void  print_acc(file) {
//    for (j=0;j<=9;j++){
// 
//    file.print(AccX[j]);
//    file.print(", ");
//    file.print(AccY[j]);
//    file.print(", ");
//    file.print(AccZ[j]);
//    file.println(", ");
//    k=0;
//    }


//void appendFile(fs::FS &fs, const char * path){
//    
//    File file = fs.open(path, FILE_APPEND);
//    
//}
void setup() {
  // put your setup code here, to run once:
Serial.begin(115200);
Wire.begin();
if (!mpu.setup(0x68)) {  // change to your own address
        while (1) {
            Serial.println("MPU connection failed. Please check your connection with `connection_check` example.");
            delay(5000);
        }
}
Serial.println("Esperando conexiÃ³n");
WiFi.softAP(ssid,password);
IPAddress IP=WiFi.softAPIP();
Serial.print("IP address");
Serial.println(IP);
server.begin();
if(!SD.begin()){
        Serial.println("Card Mount Failed");
        return;
    }
    uint8_t cardType = SD.cardType();

    if(cardType == CARD_NONE){
        Serial.println("No SD card attached");
        return;
    }

    Serial.print("SD Card Type: ");
    if(cardType == CARD_MMC){
        Serial.println("MMC");
    } else if(cardType == CARD_SD){
        Serial.println("SDSC");
    } else if(cardType == CARD_SDHC){
        Serial.println("SDHC");
    } else {
        Serial.println("UNKNOWN");
    }
//xTaskCreate(Tarea1,"Tarea1",10000,NULL,1,NULL);
}

void loop() {
  WiFiClient client=server.available();
  if (client){
      Serial.print("New Client");
      while(client.connected()){
        if (client.available()){
          
          String c=client.readStringUntil('\n');
          i=i+1;
          
          
          Serial.print(i);
          client.print(i);
          if (i==1) {
            File file=SD.open("/correr.txt",FILE_WRITE);
            prevmillis=millis();
            client.print("recogiendo datos correr");
             while (millis()-prevmillis<10000){
              if (mpu.update()){
       
              if (millis()-prev_2millis>100){
              muestrea();  
              file.print(AccX);
             
              file.print(" ,");
              file.print(AccY);
              file.print(" ,");
              file.print(AccZ);
              file.println(" ;");
              prev_2millis=millis();
              }
            }
            }
            file.close();
          
          }
          if (i==3) {
            File file=SD.open("/subir.txt",FILE_WRITE);
            prevmillis=millis();
             client.print("recogiendo datos subida");
             while (millis()-prevmillis<10000){
             if (mpu.update()){ 
             
              if (millis()-prev_2millis>100){
              muestrea;  
              file.print(AccX);
              file.print(" ,");
              file.print(AccY);
              file.print(" ,");
              file.print(AccZ);
              file.println(" ;");
              prev_2millis=millis();
              }
            }
             }
            file.close();
         
          }
          if (i==5) {
            File file=SD.open("/bajar.txt",FILE_WRITE);
            prevmillis=millis();
            client.print("recogiendo datos bajada");
             while (millis()-prevmillis<10000){
              if (mpu.update()){
              if (millis()-prev_2millis>100){
              muestrea();  
              file.print(AccX);
              
              file.print(" ,");
              file.print(AccY);
              file.print(" ,");
              file.print(AccZ);
              file.println(" ;");
              prev_2millis=millis();
              }
            }
             }
            file.close();
          
          }
          if (i==7) {
            File file=SD.open("/andar.txt",FILE_WRITE);
            prevmillis=millis();
            client.print("recogiendo datos andar");
             while (millis()-prevmillis<10000){
              if (mpu.update()){
              if (millis()-prev_2millis>100){
              muestrea();  
              file.print(AccX);
              file.print(" ,");
              file.print(AccY);
              file.print(" ,");
              file.print(AccZ);
              file.println(" ;");
              prev_2millis=millis();
              }
            }
             }
            file.close();
          
          }
           if (i==9){
            readFile(SD,"/correr.txt");
            }
            
          }
          
          
          }
        
    client.stop();
    Serial.println("Client disconnected.");
    Serial.println("");
    
    }
}
  
