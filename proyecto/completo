#include <WiFi.h>
#include "SPI.h"
#include <MPU9250.h>
#include "CircularBufferLib.h"
#include "ESPAsyncWebServer.h"



MPU9250 mpu;
volatile int interruptCounter;
const char* ssid="Mi 9T" ;
const char* password="df82a2ce66ab";
AsyncWebServer server(80);
int i =0;
int k=0;
int j=0;
float AccX;
float* ArrayY;
float AccY;
float AccZ;
String Estado="reposo";
float a;
float b;
float MediaY;
String estado_actual;



hw_timer_t*timer=NULL;
portMUX_TYPE timerMux = portMUX_INITIALIZER_UNLOCKED;
CircularBuffer<float> circularBufferX(80);
CircularBuffer<float> circularBufferY(80);
CircularBuffer<float> circularBufferZ(80);
void IRAM_ATTR onTimer() {
  portENTER_CRITICAL_ISR(&timerMux);
  interruptCounter++;
  
  portEXIT_CRITICAL_ISR(&timerMux);
 
}
const char index_html[] PROGMEM = R"rawliteral(
<!DOCTYPE HTML><html>
<head>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.7.2/css/all.css" integrity="sha384-fnmOCqbTlWIlj8LyTjo7mOUStjsKC4pOpQbqyi7RrhN7udi9RwhKkMHpvLbHG9Sr" crossorigin="anonymous">
  <style>
    html {
     font-family: Arial;
     display: inline-block;
     margin: 0px auto;
     text-align: center;
    }
    h2 { font-size: 3.0rem; }
    p { font-size: 3.0rem; }
    .units { font-size: 1.2rem; }
    .ds-labels{
      font-size: 1.5rem;
      vertical-align:middle;
      padding-bottom: 15px;
    }
  </style>
</head>
<body>
  <h2>Detector de actividad</h2>
  <p>
    
    <span class="ds-labels">Estado</span> 
    <span id="Estado">%Estado%</span>
    
  </p>
  
     
 
</body>
<script>
setInterval(function ( ) {
  var xhttp = new XMLHttpRequest();
  xhttp.onreadystatechange = function() {
    if (this.readyState == 4 && this.status == 200) {
      document.getElementById("Estado").innerHTML = this.responseText;
    }
  };
  xhttp.open("GET", "/Estado", true);
  xhttp.send();
}, 500) ;

</script>
</html>)rawliteral";

// Replaces placeholder with DS18B20 values
String processor(const String& var){
  //Serial.println(var);
  if(var == "Estado"){
    return Estado;
  }
  
  
  return String();
}






void printArray(float* x, int length, char separator)
{
  for (int iCount = 0; iCount < length-1; iCount++)
  {
    Serial.print(x[iCount]);
    Serial.print(separator);
  }
  Serial.print(x[length - 1]);
  Serial.println();
}

void muestrea() {
        
       
        AccX=mpu.getAccX();
        AccY=mpu.getAccY();
        AccZ=mpu.getAccZ();
        
}


void setup() {
  // put your setup code here, to run once:
Serial.begin(115200);

timer=timerBegin(0,80,true);
timerAttachInterrupt(timer,&onTimer,true);
timerAlarmWrite(timer,20000,true);   //cada cuantos microsegundos quieres la interrupciÃ³n
timerAlarmEnable(timer);
Wire.begin();
    delay(2000);
    
    if (!mpu.setup(0x68)) {  // change to your own address
        while (1) {
            Serial.println("MPU connection failed. Please check your connection with `connection_check` example.");
            delay(5000);
        }

}

 

  // Connect to Wi-Fi
 
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi..");
  }

  // Print ESP32 Local IP Address
  Serial.println(WiFi.localIP());

  // Route for root / web page
  server.on("/", HTTP_GET, [](AsyncWebServerRequest *request){
    request->send_P(200, "text/html", index_html, processor);
  });
  server.on("/Estado", HTTP_GET, [](AsyncWebServerRequest *request){
    request->send_P(200, "text/plain", Estado.c_str());


  });
  
  
  // Start server
  server.begin();


}
void loop() {
    
 
          
        
  if (interruptCounter > 0) {
 
    portENTER_CRITICAL(&timerMux);
    interruptCounter--;
    portEXIT_CRITICAL(&timerMux);
    
    
    if (mpu.update()){

            muestrea();
        }
      
    circularBufferX.Add(AccX);
    circularBufferY.Add(AccY);
    circularBufferZ.Add(AccZ);
    i=i+1;
  
   
  }
  if (i>40){
    ArrayY=circularBufferY.ToArray();
    
    a=ArrayY[1];
    b=ArrayY[1];
    j=0;
    MediaY=0;
    
    while(j<80){
      MediaY=ArrayY[j]/80+MediaY;
    if (ArrayY[j]>a)
    {
      
      a=ArrayY[j];
      
      //Serial.println(a);
      
      }
      
    else if   (ArrayY[j]<b)
    {
      b=ArrayY[j];
      }
      j=j+1;
    }
    i=0;
    if((a-b)<0.3){
      (Estado="reposo");  
      }
    else if ((a>0.5) and (a<1.6)){
      Estado="andando"; }
    else if ((b<-3.5)){
      Estado="corriendo"; 
      }else if ((a>1.6)){
      Estado="subiendo";
      }

    
     
      
      
  
  }
      }
//    
//  if (i>40){
//    ArrayY=circularBufferY.ToArray();
//    a=0;
//    b=0;
//    for (j=0;79;j++){
//    if (ArrayY[j]>a)
//    {
//      
//      a=ArrayY[j];
//      Serial.println(a);
//      
//      }
//      
//    else if   (ArrayY[j]<b)
//    {
//      b=ArrayY[j];
//      }
//    }
//    if ((a>0.25) and (a<2)||(b<-0.25)and (b>-1.75)){
//      estado="andando"; }
//    if (a>2.5||b<-2){
//      estado="corriendo"; }
//    client.print(estado);
//    
//    i=0;
//    }
//    
//    
  
