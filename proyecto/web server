 #include <WiFi.h>
  #include <ESPAsyncWebServer.h>

float tempC=0;
const char* ntpServer = "pool.ntp.org";      // Servidor horario
const long  gmtOffset_sec = 3600;            // Compensar  para  zona horaria 
const int   daylightOffset_sec = 3600;
tm timeinfo;

String Hora;                                 
String horas;                                
String minutos;                              
String segundos;



// Pass our oneWire reference to Dallas Temperature sensor 


// Variables to store temperature values
String temperatureF = "";
String temperatureC = "";

// Timer variables
unsigned long lastTime = 0;  
unsigned long timerDelay = 100;

// Replace with your network credentials
const char* ssid = "MOVISTAR_10C4";
const char* password = "32472A6EC6114FF1D71C";

// Create AsyncWebServer object on port 80
AsyncWebServer server(80);







const char index_html[] PROGMEM = R"rawliteral(
<!DOCTYPE HTML><html>
<head>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.7.2/css/all.css" integrity="sha384-fnmOCqbTlWIlj8LyTjo7mOUStjsKC4pOpQbqyi7RrhN7udi9RwhKkMHpvLbHG9Sr" crossorigin="anonymous">
  <style>
    html {
     font-family: Arial;
     display: inline-block;
     margin: 0px auto;
     text-align: center;
    }
    h2 { font-size: 3.0rem; }
    p { font-size: 3.0rem; }
    .units { font-size: 1.2rem; }
    .ds-labels{
      font-size: 1.5rem;
      vertical-align:middle;
      padding-bottom: 15px;
    }
  </style>
</head>
<body>
  <h2>ESP 32 Server</h2>
  <p>
    
    <span class="ds-labels">Hora</span> 
    <span id="HORA">%HORA%</span>
    
  </p>
  
     <p><a href="/Reset"><button class="button">Reset</button></a></p>
 
</body>
<script>
setInterval(function ( ) {
  var xhttp = new XMLHttpRequest();
  xhttp.onreadystatechange = function() {
    if (this.readyState == 4 && this.status == 200) {
      document.getElementById("HORA").innerHTML = this.responseText;
    }
  };
  xhttp.open("GET", "/HORA", true);
  xhttp.send();
}, 500) ;

</script>
</html>)rawliteral";

// Replaces placeholder with DS18B20 values
String processor(const String& var){
  //Serial.println(var);
  if(var == "HORA"){
    return Hora;
  }
  else if(var == "Reset"){
    timeinfo.tm_hour=0; 
    timeinfo.tm_hour=0; 
    timeinfo.tm_min=0; 
    timeinfo.tm_sec=0;
    return Hora;
  }
  return String();
}

void setup(){
  // Serial port for debugging purposes
  Serial.begin(115200);
  Serial.println();
  



  

  // Connect to Wi-Fi
  WiFi.begin(ssid, password);
  Serial.println("Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println();
  
  // Print ESP Local IP Address
  Serial.println(WiFi.localIP());
  configTime(gmtOffset_sec, daylightOffset_sec, ntpServer);
  // Route for root / web page
  server.on("/", HTTP_GET, [](AsyncWebServerRequest *request){
    request->send_P(200, "text/html", index_html, processor);
  });
  server.on("/HORA", HTTP_GET, [](AsyncWebServerRequest *request){
    request->send_P(200, "text/plain", Hora.c_str());
  });
  server.on("/Reset", HTTP_GET, [](AsyncWebServerRequest *request){     //si recibe request de reset poner el pulsador como TRUE
    //pulsador = true;    
    request->send_P(200, "text/plain", Hora.c_str());   //llama a la funciÃ³n de processor
  });
  // Start server
  server.begin();
}
String get_hora(){
  getLocalTime(&timeinfo);
  horas = timeinfo.tm_hour; 
  minutos = timeinfo.tm_min; 
  segundos=timeinfo.tm_sec;
  Hora = horas+":"+minutos+":"+segundos;
  return Hora;
} 
void loop(){
  if ((millis() - lastTime) > timerDelay) {
    
    Hora = get_hora();
    
    lastTime = millis();
  }  
}
